{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"idx",
				"idx_sprite"
			],
			[
				"refres",
				"refresh_osd"
			],
			[
				"conso",
				"console_text"
			],
			[
				"cons",
				"console"
			],
			[
				"VK",
				"VK_TAB"
			],
			[
				"console",
				"console_sprite"
			],
			[
				"window",
				"window_bmp"
			],
			[
				"Game_a",
				"Game_Actor"
			],
			[
				"frame",
				"frame_count"
			],
			[
				"par",
				"parameters"
			],
			[
				"del",
				"delete"
			],
			[
				"disa",
				"disabled"
			],
			[
				"get",
				"getloc"
			],
			[
				"common_ev",
				"common_event_id"
			],
			[
				"log",
				"log_sys"
			],
			[
				"log_",
				"log_err"
			],
			[
				"refre",
				"refresh_table"
			],
			[
				"string",
				"string_similarity"
			],
			[
				"icon",
				"icon_data"
			],
			[
				"refresh",
				"refresh_console"
			],
			[
				"INFO",
				"INFO_COLOR"
			],
			[
				"quick",
				"quick_start"
			],
			[
				"instanc",
				"instance_variable_set"
			],
			[
				"instance",
				"instance_variables〔function〕"
			],
			[
				"text",
				"textStatus"
			],
			[
				"json",
				"json_data"
			],
			[
				"export",
				"export_json"
			],
			[
				"sort",
				"sort_col"
			],
			[
				"pad",
				"padding_bottom"
			],
			[
				"wait",
				"wait_for_message"
			],
			[
				"Widget_label",
				"Widget_SuperLabel"
			],
			[
				"circ",
				"circ_in_out"
			],
			[
				"quad_in",
				"quad_in_out"
			],
			[
				"Super",
				"Sprite_Superbox"
			],
			[
				"Widt",
				"Widget_Clicker"
			],
			[
				"lett",
				"letterlayer"
			],
			[
				"Widg",
				"Widget_Image"
			],
			[
				"linear",
				"linear_tween"
			],
			[
				"Par",
				"ParallelNano"
			],
			[
				"start",
				"start_instants"
			],
			[
				"dis",
				"disable_next_music"
			],
			[
				"For",
				"ForktongueCaverns"
			],
			[
				"spawn",
				"spawn_puzzle"
			],
			[
				"keyl",
				"keylock"
			],
			[
				"max",
				"max_width"
			],
			[
				"opp",
				"get_opposite_region"
			],
			[
				"targ",
				"target_loc"
			],
			[
				"room",
				"room_dir_to_rpg_dir"
			],
			[
				"from",
				"from_region"
			],
			[
				"fill",
				"fill_edge"
			],
			[
				"XF",
				"XFER_DOWN"
			],
			[
				"bot",
				"bottom_row"
			],
			[
				"net",
				"next_in_direction"
			],
			[
				"key",
				"key_level"
			],
			[
				"MAX",
				"MAX_SPACES"
			],
			[
				"find",
				"find_boss"
			],
			[
				"norm",
				"normalize_intensity"
			],
			[
				"next",
				"next_level_base_intensity"
			],
			[
				"INTE",
				"INTENSITY_GROWTH_JITTER"
			],
			[
				"INT",
				"INTENSITY_GROWTH_JITTER"
			],
			[
				"set",
				"set_item"
			],
			[
				"swit",
				"switch_room"
			],
			[
				"STA",
				"STATE_EITHER"
			],
			[
				"base",
				"base_room"
			],
			[
				"given",
				"given_state"
			],
			[
				"any",
				"any_locks"
			],
			[
				"remove",
				"remove_descendants_from_list"
			],
			[
				"bos",
				"boss_key"
			],
			[
				"boss",
				"boss_room"
			],
			[
				"new",
				"new_key_level"
			],
			[
				"pos",
				"possible_goal_rooms"
			],
			[
				"pare",
				"parent"
			],
			[
				"paren",
				"parent_room"
			],
			[
				"cho",
				"choose_room_with_free_edge"
			],
			[
				"get_ma",
				"get_max_keys"
			],
			[
				"rooms",
				"rooms_per_lock"
			],
			[
				"SWI",
				"SWITCH_OFF"
			],
			[
				"stat",
				"STATE_OFF"
			],
			[
				"implies",
				"implies_condition"
			],
			[
				"Dun",
				"DunGenRoom"
			],
			[
				"Rayc",
				"Raycast	ray, hitInfo, distance"
			],
			[
				"Rayca",
				"RaycastHit"
			],
			[
				"On",
				"OnCollisionStay	collision"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Aveyond4/Editor/meta/actors.json",
			"settings":
			{
				"buffer_size": 241,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#==============================================================================\n# ** Game_Event\n#------------------------------------------------------------------------------\n#  This class deals with events. It handles functions including event page \n#  switching via condition determinants, and running parallel process events.\n#  It's used within the Game_Map class.\n#==============================================================================\n\nclass Game_Event < Game_Character\n  #--------------------------------------------------------------------------\n  # * Public Instance Variables\n  #--------------------------------------------------------------------------\n  attr_reader   :trigger                  # trigger\n  attr_reader   :list                     # list of event commands\n  attr_reader   :starting                 # starting flag\n  \n  attr_reader   :name\n      \n  #--------------------------------------------------------------------------\n  # * Object Initialization\n  #     event  : event (RPG::Event)\n  #--------------------------------------------------------------------------\n  def initialize(event)\n    super()\n\n    @event = event\n    @id = event.id\n    \n    @erased = false\n    @disabled = $state.disable?(@id)\n    @deleted = $state.delete?(@id)\n\n    @starting = false\n    @through = true\n\n    @width = 1\n    @height = 1\n\n    # Name breakdown\n    name = @event.name\n    if name.include?('::')\n      name = name.delete('::')\n      clone = name\n    end\n    if name == '' || name == '#'\n      @icon = nil\n      @name = 'nil'\n    else\n      data = name.split('#').first.split('.')\n      if data.size > 1\n        @icon = data[0].strip\n        @name = data[1].strip\n      else\n        @icon = @name = data[0].strip\n      end\n    end   \n    \n    # Set pages from clone or event\n    if clone\n      @pages = $data.clones[clone]\n    else\n      @pages = @event.pages \n    end\n\n    # Restore saved location if relevant\n    if $state.loc?(@id)\n      loc = $state.getloc(@id)\n      moveto(loc[0],loc[1])\n    else\n      moveto(@event.x, @event.y)\n    end\n    \n    refresh\n  end\n\n  #--------------------------------------------------------------------------\n  # * Clear Starting Flag\n  #--------------------------------------------------------------------------\n  def clear_starting\n    @starting = false\n  end\n\n  def icon\n    return nil if @erased || @disabled || @deleted\n    return @icon\n  end\n\n  def collide?(x,y)\n    return false if x < @x\n    return false if y < @y\n    return false if x > @x + @width - 1\n    return false if y > @y + @height - 1\n    return true\n  end\n\n  #--------------------------------------------------------------------------\n  # * Determine if Over Trigger\n  #    is this event under player\n  #--------------------------------------------------------------------------\n  def over_trigger?\n    # If not through situation with character as graphic\n    if @character_name != \"\" and not @through\n      # Starting determinant is face\n      return false\n    end\n    # If this position on the map is impassable\n    unless $map.passable?(@x, @y, 0)\n      # Starting determinant is face\n      return false\n    end\n    # Starting determinant is same position\n    return true\n  end\n\n  #--------------------------------------------------------------------------\n  # * Start Event\n  #--------------------------------------------------------------------------\n  def start  \n    return if @erased || @deleted || @disabled\n    return if !@list || @list.size < 1\n    @starting = true    \n  end\n\n  def find_page\n    return nil if @erased || @deleted\n    @pages.reverse.find { |page| \n      conditions_met?(page) \n    } \n  end\n\n  def conditions_met?(page)\n      \n        # DANHAX - check super conditions\n        page.list.each{ |line|\n      \n          if line.code == 108\n            comment = line.parameters[0]\n            if comment[0] == '?'[0]\n              data = comment.split(' ')\n              if !condition_applies?(data)\n                return false\n              end\n            end\n          end        \n        }  \n\n        return true\n  end\n\n  #--------------------------------------------------------------------------\n  # * Refresh\n  #--------------------------------------------------------------------------\n  def refresh\n    new_page = find_page\n    setup_page(new_page) if new_page != @page\n  end\n\n  \n  \n  def setup_page(new_page)\n\n    # Set @page as current event page\n    @page = new_page\n    if @page\n      setup_page_settings\n      read_comment_data\n    else\n      clear_page_settings\n    end\n\n    # Clear starting flag\n    clear_starting\n    \n    # If trigger is [parallel process]\n    if @trigger == 4\n      @interpreter = Interpreter.new\n      @interpreter.setup(@list, @event.id)\n    end\n\n    # Auto event start determinant\n    check_event_trigger_auto\n\n  end\n  \n\n  def clear_page_settings\n      @tile_id = 0\n      @character_name = \"\"\n      @character_hue = 0\n      @move_type = 0\n      @through = true\n      @trigger = nil\n      @list = nil\n      @interpreter = nil\n  end\n\n  def setup_page_settings\n    # Set each instance variable\n    @tile_id = @page.graphic.tile_id\n    @character_name = @page.graphic.character_name\n    if @original_direction != @page.graphic.direction\n      @direction = @page.graphic.direction\n      @original_direction = @direction\n      @prelock_direction = 0\n    end\n    if @original_pattern != @page.graphic.pattern\n      @pattern = @page.graphic.pattern\n      @original_pattern = @pattern\n    end\n    #XP - VX @opacity = @page.graphic.opacity\n    #XP - VX @blend_type = @page.graphic.blend_type\n    @move_type = @page.move_type\n    @move_speed = @page.move_speed\n    @move_frequency = @page.move_frequency\n    @move_route = @page.move_route\n    @move_route_index = 0\n    @move_route_forcing = false\n    @walk_anime = @page.walk_anime\n    @step_anime = @page.step_anime\n    @direction_fix = @page.direction_fix\n    @through = @page.through\n    #XP - VX @always_on_top = @page.always_on_top\n    @trigger = @page.trigger\n    @list = @page.list\n    @interpreter = nil\n\n  end\n  \n  def read_comment_data\n    comment_data = []\n\n    @list.each{ |line|\n      next if line.code != 108\n      if line.parameters[0].include?('#')\n        comment_data.push(line.parameters[0].split(\" \"))\n      end\n    }\n\n    comment_data.each{ |data|\n      case data[0]\n\n        when '#opacity'\n          self.opacity = data[1].to_i\n        when '#width'\n          @width = data[1].to_i\n        when '#height'\n          @height = data[1].to_i\n        when '#gfx'\n          @character_name += \"X/\" + data[1]\n\n      end\n    }\n    \n\n  end\n\n  #--------------------------------------------------------------------------\n  # * Automatic Event Starting Determinant\n  #--------------------------------------------------------------------------\n  def check_event_trigger_auto\n    # # If trigger is [touch from event] and consistent with player coordinates\n    # if @trigger == 2 and @x == $player.x and @y == $player.y\n    #   # If starting determinant other than jumping is same position event\n    #   if not jumping? and over_trigger?\n    #     start\n    #   end\n    # end\n    # If trigger is [auto run]\n    if @trigger == 3 || @event.name == 'AUTORUN'\n      start\n    end\n  end\n\n  #--------------------------------------------------------------------------\n  # * Frame Update\n  #--------------------------------------------------------------------------\n  def update\n    super\n    # Automatic event starting determinant\n    check_event_trigger_auto\n\n    # If parallel process is valid\n    if @interpreter != nil\n      @interpreter.update\n    end\n\n  end\n    \n  #--------------------------------------------------------------------------\n  # * Save Position\n  #--------------------------------------------------------------------------\n  def saveloc\n    $state.loc!(@event.id)\n  end\n\n  #--------------------------------------------------------------------------\n  # * Temporarily Erase\n  #--------------------------------------------------------------------------\n  def erase\n    @erased = true\n    refresh\n  end\n\n  def disable\n    @disabled = true\n    $state.disable!(@id)\n    refresh\n  end\n\n  def delete\n    @deleted = true\n    $state.delete!(@id)\n    refresh\n  end\n\nend",
			"file": "Model/event.rb",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 8216,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Managers/game.rb",
			"settings":
			{
				"buffer_size": 1801,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Scenes/map.rb",
			"settings":
			{
				"buffer_size": 1959,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Scenes/battle.rb",
			"settings":
			{
				"buffer_size": 2431,
				"line_ending": "Windows"
			}
		},
		{
			"file": "main.rb",
			"settings":
			{
				"buffer_size": 2047,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Model/Battle/battle.rb",
			"settings":
			{
				"buffer_size": 655,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Model/State/temp.rb",
			"settings":
			{
				"buffer_size": 1233,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 64 files for \"$temp.\" (case sensitive)\n\nC:\\Aveyond4\\Scripts\\Interpreter\\interp_1.rb:\n  105      \n  106      # If common event call is reserved\n  107:     if $temp.common_event_id > 0\n  108        \n  109        # Set up event\n  110:       setup($data.commons[$temp.common_event_id].list, 0)\n  111        \n  112        # Release reservation\n  113:       $temp.common_event_id = 0\n  114        \n  115        return\n\nC:\\Aveyond4\\Scripts\\Model\\State\\party.rb:\n  124          end\n  125          $map.world.start_flash(Color.new(255,0,0,128), 4)\n  126:         $temp.gameover = $party.all_dead?\n  127        end\n  128      end\n\nC:\\Aveyond4\\Scripts\\Scenes\\battle.rb:\n   48      #end   \n   49  \n   50:     if $temp.transition_processing\n   51:       $temp.transition_processing = false\n   52  \n   53:       if $temp.transition_name == \"\"\n   54          Graphics.transition(20)\n   55        else\n   56          Graphics.transition(40, \"Graphics/Transitions/\" +\n   57:           $temp.transition_name)\n   58        end\n   59      end\n   ..\n   73    def transfer_player\n   74     \n   75:     $temp.player_transferring = false\n   76      $player.clear_path\n   77  \n   78      # Map to teleport to \n   79:     if $map.map_id != $temp.player_new_map_id\n   80        $map.setup($game_temp.player_new_map_id)      \n   81      end\n   82  \n   83      # Location on the map to teleport to\n   84:     $player.moveto($temp.player_new_x, $temp.player_new_y)\n   85:     $player.direction = $temp.player_new_direction\n   86  \n   87      $player.straighten\n   88      $map.update\n   89  \n   90:     if $temp.transition_processing\n   91:       $temp.transition_processing = false\n   92        Graphics.transition(20)\n   93      end\n\nC:\\Aveyond4\\Scripts\\Scenes\\map.rb:\n   58    def transfer_player\n   59     \n   60:     $temp.player_transferring = false\n   61      $player.clear_path\n   62  \n   63      # Map to teleport to \n   64:     if $map.map_id != $temp.player_new_map_id\n   65        $map.setup($game_temp.player_new_map_id)      \n   66      end\n   67  \n   68      # Location on the map to teleport to\n   69:     $player.moveto($temp.player_new_x, $temp.player_new_y)\n   70:     $player.direction = $temp.player_new_direction\n   71  \n   72      $player.straighten\n\n20 matches across 4 files\n",
			"settings":
			{
				"buffer_size": 2280,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "#==============================================================================\n# ** Game_Map\n#==============================================================================\n\nclass Game_Map\n  \n  #--------------------------------------------------------------------------\n  # * Public Instance Variables\n  #--------------------------------------------------------------------------\n  attr_reader   :tileset  \n  \n  # keep these\n  attr_reader   :passages                 # passage table\n  attr_reader   :priorities               # prioroty table\n  attr_reader   :terrain_tags             # terrain tag table\n    \n  attr_accessor :display_x                # display x-coordinate * 128\n  attr_accessor :display_y                # display y-coordinate * 128\n  \n  attr_accessor :target_x\n  attr_accessor :target_y\n\n  attr_accessor :target\n\n\n  attr_accessor :need_refresh             # refresh request flag\n  \n  attr_reader   :events                   # events\n  \n  attr_reader   :fog_ox                   # fog x-coordinate starting point\n  attr_reader   :fog_oy                   # fog y-coordinate starting point\n\n  \n  attr_reader   :map_name                 # name of the map\n    \n  attr_accessor :transition_processing    # transition processing flag\n  attr_accessor :transition_name          # transition file name\n  \n  attr_accessor :new_tileset\n\n  attr_reader :interpreter\n  \n  #--------------------------------------------------------------------------\n  # * Object Initialization\n  #--------------------------------------------------------------------------\n  def initialize\n    @map_id = 0\n    @display_x = 0\n    @display_y = 0\n\n    @interpreter = Interpreter.new(0,true)\n  end\n\n  def id\n    return @map_id\n  end\n  \n  #--------------------------------------------------------------------------\n  # * Setup\n  #     map_id : map ID\n  #--------------------------------------------------------------------------\n  def setup(map_id)\n    @new_tileset = true\n    \n    # Put map ID in @map_id memory\n    @map_id = map_id\n    \n    # Load map from file and set @map\n    @map = load_data(sprintf(\"Data/Map%03d.rxdata\", @map_id))\n    @map_name = $data.mapinfos[map_id].name \n        \n    # Hold onto the tileset\n    @tileset = $data.tilesets[@map.tileset_id]\n        \n    @passages = @tileset.passages \n    @priorities = @tileset.passages#@tileset.priorities\n    @terrain_tags = @tileset.passages#@tileset.terrain_tags\n    \n    # Initialize displayed coordinates\n    @display_x = 0\n    @display_y = 0\n\n    @target_x = 0\n    @target_y = 0\n\n    @target = nil\n    \n    # Clear refresh request flag\n    @need_refresh = false\n    \n    # Set map event data\n    @events = {}\n    for i in @map.events.keys\n      @events[i] = Game_Event.new(@map.events[i])\n    end\n    \n    # Initialize all fog information\n    @fog_ox = 0\n    @fog_oy = 0\n    @fog_opacity_duration = 0\n    @fog_opacity_target = 0\n        \n    # Clear player path for mouse pathfinding\n    #$player.clear_path\n    \n  end\n\n  #--------------------------------------------------------------------------\n  # * Get Tileset ID\n  #--------------------------------------------------------------------------\n  def tileset_id\n    return @map.tileset_id\n  end\n\n  #--------------------------------------------------------------------------\n  # * Get Map ID\n  #--------------------------------------------------------------------------\n  def map_id\n    return @map_id\n  end\n\n  #--------------------------------------------------------------------------\n  # * Get Width\n  #--------------------------------------------------------------------------\n  def width\n    return @map.width\n  end\n\n  #--------------------------------------------------------------------------\n  # * Get Height\n  #--------------------------------------------------------------------------\n  def height\n    return @map.height\n  end\n  \n  #--------------------------------------------------------------------------\n  # * Get Map Data\n  #--------------------------------------------------------------------------\n  def data\n    return @map.data\n  end\n  \n  #--------------------------------------------------------------------------\n  # * Automatically Change Background Music and Backround Sound\n  #--------------------------------------------------------------------------\n  def autoplay\n    # Zones!\n    if @map.autoplay_bgm\n      $game_system.bgm_play(@map.bgm)\n    end\n    if @map.autoplay_bgs\n      $game_system.bgs_play(@map.bgs)\n    end\n  end\n\n  #--------------------------------------------------------------------------\n  # * Automatically Change Background Music and Backround Sound\n  #--------------------------------------------------------------------------\n  def autoplay_bgs\n      $game_system.bgs_play(@map.bgs)\n  end  \n  #--------------------------------------------------------------------------\n  # * Refresh\n  #--------------------------------------------------------------------------\n  def refresh\n    # If map ID is effective\n    if @map_id > 0\n      # Refresh all map events\n      for event in @events.values\n        event.refresh\n      end\n    end\n\n    # Clear refresh request flag\n    @need_refresh = false\n  end\n  \n  #--------------------------------------------------------------------------\n  # * Determine Valid Coordinates\n  #     x          : x-coordinate\n  #     y          : y-coordinate\n  #--------------------------------------------------------------------------\n  def valid?(x, y)\n    return (x >= 0 and x < width and y >= 0 and y < height)\n  end\n\n  #--------------------------------------------------------------------------\n  # * Determine if Passable\n  #     x          : x-coordinate\n  #     y          : y-coordinate\n  #     d          : direction (0,2,4,6,8,10)\n  #                  *  0,10 = determine if all directions are impassable\n  #     self_event : Self (If event is determined passable)\n  #--------------------------------------------------------------------------\n  def passable?(x, y, d, self_event = nil)\n    # If coordinates given are outside of the map\n    unless valid?(x, y)\n      # impassable\n      return false\n    end\n    # Change direction (0,2,4,6,8,10) to obstacle bit (0,1,2,4,8,0)\n    bit = (1 << (d / 2 - 1)) & 0x0f\n    # Loop in all events\n    for event in events.values\n      # If tiles other than self are consistent with coordinates\n      if event.tile_id >= 0 and event != self_event and\n         event.x == x and event.y == y and not event.through\n        # If obstacle bit is set\n        if @passages[event.tile_id] & bit != 0\n          # impassable\n          return false\n        # If obstacle bit is set in all directions\n        elsif @passages[event.tile_id] & 0x0f == 0x0f\n          # impassable\n          return false\n        # If priorities other than that are 0\n        elsif @priorities[event.tile_id] == 0\n          # passable\n          return true\n        end\n      end\n    end\n    # Loop searches in order from top of layer\n    for i in [2, 1, 0]\n      # Get tile ID\n      tile_id = data[x, y, i]\n      # Tile ID acquistion failure\n      if tile_id == nil\n        # impassable\n        return false\n      # If obstacle bit is set\n      elsif @passages[tile_id] & bit != 0\n        # impassable\n        return false\n      # If obstacle bit is set in all directions\n      elsif @passages[tile_id] & 0x0f == 0x0f\n        # impassable\n        return false\n      # If priorities other than that are 0\n      elsif @priorities[tile_id] == 0\n        # passable\n        return true\n      end\n    end\n    # passable\n    return true\n  end\n\n  #--------------------------------------------------------------------------\n  # * Determine Thicket\n  #     x          : x-coordinate\n  #     y          : y-coordinate\n  #--------------------------------------------------------------------------\n  def bush?(x, y)\n    if @map_id != 0\n      for i in [2, 1, 0]\n        tile_id = data[x, y, i]\n        if tile_id == nil\n          return false\n        elsif @passages[tile_id] & 0x40 == 0x40\n          return true\n        end\n      end\n    end\n    return false\n  end\n\n  #--------------------------------------------------------------------------\n  # * Determine Counter\n  #     x          : x-coordinate\n  #     y          : y-coordinate\n  #--------------------------------------------------------------------------\n  def counter?(x, y)\n    if @map_id != 0\n      for i in [2, 1, 0]\n        tile_id = data[x, y, i]\n        if tile_id == nil\n          return false\n        elsif @passages[tile_id] & 0x80 == 0x80\n          return true\n        end\n      end\n    end\n    return false\n  end\n\n  #--------------------------------------------------------------------------\n  # * Get Terrain Tag\n  #     x          : x-coordinate\n  #     y          : y-coordinate\n  #--------------------------------------------------------------------------\n  def terrain_tag(x, y)\n    if @map_id != 0\n      for i in [2, 1, 0]\n        tile_id = data[x, y, i]\n        if tile_id == nil\n          return 0\n        elsif tile_id > 0   # @terrain_tags[tile_id] > 0\n          return @terrain_tags[tile_id]\n        end\n      end\n    end\n    return 0\n  end\n\n  #--------------------------------------------------------------------------\n  # * Get Designated Position Event ID\n  #     x          : x-coordinate\n  #     y          : y-coordinate\n  #--------------------------------------------------------------------------\n  def check_event(x, y)\n    for event in $map.events.values\n      if event.x == x and event.y == y\n        return event.id\n      end\n    end\n  end\n\n  #--------------------------------------------------------------------------\n  # * Frame Update\n  #--------------------------------------------------------------------------\n  def update\n\n    @interpreter.update\n\n    # GET IT WORKING BETTER\n    #return\n\n    # Refresh map if necessary\n    if $map.need_refresh\n      refresh\n    end\n\n    @target = $player if @target == nil\n\n    if @target != nil\n    @target_x = @target.real_x- (128 * 9.5)\n    @target_y = @target.real_y- (128 * 7)\n\n\n    if @target_x > @display_x\n      @display_x += (@target_x-@display_x) * 0.2\n    end\n    if @target_x < @display_x\n      @display_x -= (@display_x-@target_x) * 0.2\n    end\n\n    if @target_y > @display_y\n      @display_y += 3\n    end\n    if @target_y < @display_y\n      @display_y -= 3\n    end\n\n  end\n\n    # Update map event\n    for event in @events.values\n      # event must be in range to be updated (anti-lag)\n      #if (event.inrange_map and event.event.name != ANTI_LAG_EVENT_NAME) or\n      #  [3,4].include?event.trigger\n        event.update\n      #end\n    end\n    \n    # Manage fog scrolling\n   # @fog_ox -= @fog_sx / 8.0\n   # @fog_oy -= @fog_sy / 8.0\n    \n    # # Manage change in fog opacity level\n    # if @fog_opacity_duration >= 1\n    #   d = @fog_opacity_duration\n    #   @fog_opacity = (@fog_opacity * (d - 1) + @fog_opacity_target) / d\n    #   @fog_opacity_duration -= 1\n    # end\n  end\n  \n  #--------------------------------------------------------------------------\n  # * Event At\n  #--------------------------------------------------------------------------\n  def event_at(x, y)\n    for event in @events.values\n        return event if (event.x == x && event.y == y) or\n          (event.x == x && event.y == y + 1 && \n          RPG::Cache.character(event.character_name, event.character_hue).height / 4 > 32)\n    end\n    return nil\n  end\n  \n  #--------------------------------------------------------------------------\n  # * Events At (returns multiple events at the same position in an array)\n  #--------------------------------------------------------------------------\n  def events_at(x, y)\n    eventarray = []\n    for event in @events.values\n      eventarray.push event if (event.x == x && event.y == y) or\n        (event.x == x && event.y == y + 1 && \n        RPG::Cache.character(event.character_name, event.character_hue).height / 4 > 32)\n    end\n    return eventarray if eventarray.size > 0\n    return nil\n  end\n  #--------------------------------------------------------------------------\n  # * Lowest Event At (returns frontmost sprite at mouse position)\n  #--------------------------------------------------------------------------\n  def lowest_event_at(x, y)\n    evt = nil\n    for event in @events.values\n      if (event.x == x && event.y == y) or\n        (event.x == x && event.y == y + 1 && \n        RPG::Cache.character(event.character_name, event.character_hue).height / 4 > 32)\n        if evt == nil || event.y > evt.y\n          evt = event\n        end\n      end\n    end\n    return evt\n  end\n\nend\n",
			"file": "Model/map.rb",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 12520,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Scenes/menu.rb",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#==============================================================================\n# ** Sprite_Character\n#------------------------------------------------------------------------------\n#  This sprite is used to display the character.It observes the Game_Character\n#  class and automatically changes sprite conditions.\n#==============================================================================\n\nclass Sprite_Character < Sprite\n\n  attr_accessor :character     \n\n  #--------------------------------------------------------------------------\n  # * Object Initialization\n  #     viewport  : viewport\n  #     character : character (Game_Character)\n  #--------------------------------------------------------------------------\n  def initialize(viewport, character = nil)\n    super(viewport)\n    @character = character\n    update\n  end\n\n  #--------------------------------------------------------------------------\n  # * Frame Update\n  #--------------------------------------------------------------------------\n  def update\n    super\n    # If tile ID, file name, or hue are different from current ones\n    if @tile_id != @character.tile_id or\n       @character_name != @character.character_name\n      # Remember tile ID, file name, and hue\n      @tile_id = @character.tile_id\n      @character_name = @character.character_name\n\n      # If tile ID value is valid\n      if @tile_id >= 384\n        self.bitmap = Cache.tile($map.tileset.name,@tile_id, 0)\n        self.src_rect.set(0, 0, 32, 32)\n        self.ox = 16\n        self.oy = 32\n      # If tile ID value is invalid\n      else\n        self.bitmap = Cache.character(@character.character_name,0)\n        if @character == $player\n          self.bitmap = Cache.character(\"Player/boy\",0)\n        end\n        @cw = bitmap.width / 4\n        @ch = bitmap.height / 4\n        self.ox = @cw / 2\n        self.oy = @ch\n      end\n    end\n\n    # Set visible situation\n    self.visible = !@character.transparent\n    \n    # If graphic is character\n    if @tile_id == 0\n      # Set rectangular transfer\n      sx = @character.pattern * @cw\n      sy = (@character.direction - 2) / 2 * @ch\n      self.src_rect.set(sx, sy, @cw, @ch)\n    end\n\n    # Set sprite coordinates\n    self.x = @character.screen_x\n    self.y = @character.screen_y\n    self.z = @character.screen_z(@ch)\n    \n    # Set opacity level, blend method, and bush depth\n    self.opacity = @character.opacity\n    self.bush_depth = @character.bush_depth\n    \n    # Animation\n    # if @character.animation_id != 0\n    #   animation = $data_animations[@character.animation_id]\n    #   animation(animation, true)\n    #   @character.animation_id = 0\n    # end\n\n  end\nend\n",
			"file": "View/character.rb",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 2654,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#==============================================================================\n# Game_Interface\n#==============================================================================\n\nclass Game_Hud\n  \n  attr_accessor :message, :screen\n  attr_accessor :trans\n  \n  #--------------------------------------------------------------------------\n  # Prepare\n  #--------------------------------------------------------------------------\n  def initialize\n\n    #@winder = Window_Item.new\n    \n      @screen = Ui_Screen.new\n      @message = Ui_Message.new\n      @trans = Ui_Trans.new\n        \n  end\n  \n  #--------------------------------------------------------------------------\n  # Good beans\n  #--------------------------------------------------------------------------\n  def busy?\n    return true if @screen.busy? || \n                    @message.busy? ||\n                    @trans.busy?\n    return false\n  end\n  \n  #--------------------------------------------------------------------------\n  # Update\n  #--------------------------------------------------------------------------  \n  def update\n\n    @screen.update\n    @message.update\n\n    @trans.update\n    \n  end\n  \nend",
			"file": "View/hud.rb",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 1161,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#==============================================================================\n# Ui_Message\n#==============================================================================\n\nclass Ui_Message < Ui_Base\n\n  # Consts\n  MIN_WIDTH = 200\n  MAX_WIDTH = 500\n  TAB_WIDTH = 35\n\n  SPACING = 7\n  LINE_HEIGHT = 32\n\n  SPEED_1 = 0\n  SPEED_2 = 1\n  SPEED_3 = 2\n  SPEED_4 = 3\n  SPEED_5 = 4\n  \n  #--------------------------------------------------------------------------\n  # Prepare\n  #--------------------------------------------------------------------------\n  def initialize\n    super(500)\n\n    # Create the pieces but do nothing besides\n    @state = :idle\n\n    # Hold on to the convo\n    @text = \"\"\n\n    # This line data\n    @name = ''\n\n    @scratch = Bitmap.new(400,50)\n\n    # Hold the textbox, \n    #@text_viewport\n\n    @lines = []\n\n\n    # Settings\n    @color = nil\n\n    # Text display\n    @text_delay = SPEED_3\n    @wait_frames = 0\n    @next_char = 0\n\n    @cx = 0\n    @cy = 0\n    \n    @line_idx = nil\n    @word_idx = nil\n    @char_idx = nil\n\n    @width = 0\n    @height = 0\n\n    # Setup sprites\n    @textbox = add_sprite\n    @textbox.x = 250\n    @textbox.y = 150\n    #@namebox = add(Sprite.new)\n\n    #@next = add(Sprite.new)\n    @face = add_sprite\n    #@tail = add(Sprite.new)\n\n    @window_bmp = nil\n    @text_bmp = nil\n\n    @scratch.font.size = 30\n    \n  end\n  \n  #--------------------------------------------------------------------------\n  # Frame Update\n  #--------------------------------------------------------------------------\n  def update\n    super\n    \n#~     if Input.press?(:SHIFT)\n#~       @state = :closing\n#~       @show_next = false\n#~     end      \n    \n    # Skip to end of this text\n    if Input.trigger?(Input::C) && @state == :texting\n      @skip_all = true\n    end\n\n    case @state\n\n      when :closed\n        #nothing\n\n      when :opening\n        @state = :texting if self.zoom_y == 1.0\n\n      when :closing\n        @state = :idle\n\n      when :texting\n        @next_char -= 1\n        if @next_char <= 0\n          #log_err \"DOING\"\n          update_message\n        end\n        redraw\n        \n      when :waiting\n        update_waiting\n\n        # Choices in here too\n\n      when :pausing\n        check_input_next\n      when :done\n        check_input_done\n        \n    end\n\n    # skipping\n    # while @state == :texting && @skip_all\n    #   @next_char > 0 ? @next_char -= 1 : update_message\n    # end\n\n  end\n  \n  #--------------------------------------------------------------------------\n  # Show Convo\n  #--------------------------------------------------------------------------\n  def start(text, choices = nil)\n\n    # Clear out the previous word\n    @word = nil\n\n    text_data = text.split(\":\")\n\n    # Find speaker name, use to get face / event\n    speaker = text_data[0]\n\n    # TODO - add actor name to this check\n    # Get face if exists\n    if $data.actors.keys.include?(speaker[0..2])\n      @face.bitmap = Cache.face(speaker)\n    end\n\n    # Prepare the words to be written\n    @lines = split_text(text_data[1])    \n\n    # Now of the height? How many lines are there?\n    @width = max_width\n    @height = @lines.count * (LINE_HEIGHT)\n\n    # Position the textbox wherever it best fits\n\n    # Prepare the sprites\n    @textbox.bitmap = Bitmap.new(@width,@height)\n\n    @text_bmp = Bitmap.new(@width,@height)\n\n    @window_bmp = Bitmap.new(@width,@height)\n    @window_bmp.fill(Color.new(0,0,0,200))\n\n\n    @scratch.font.size = 30\n    @text_bmp.font.size = 30\n    @textbox.bitmap.font.size = 30\n\n\n    @line_idx = 0\n    @word_idx = -1\n\n    @cx = 0\n    @cy = 0\n\n    # Start text\n    @state = :texting\n\n        \n  end\n\n  #--------------------------------------------------------------------------\n  # * Update Message\n  #--------------------------------------------------------------------------\n  def update_message\n    \n    # if the current word is empty, get the next one and see if it fits\n    next_word if @word == nil || @char_idx > @word.length\n        \n    # if not texting then don't go\n    return unless @state == :texting\n            \n    # Add the next character to the final word\n    @char_idx += 1\n\n    # Play a lovely character sound\n    #sound(:text_char) if $settings.value('text_sound') \n    \n    # Wait before drawing another character\n    @next_char = @text_delay\n    \n    # AUTO PAUSE AFTER SENTENCE HERE\n    #(@wait_frames = @text_delay * 5; @state = :waiting) if @word.empty? && @dodotpause && @wordlength > 1\n    \n\n  end\n\n  def redraw\n\n    @textbox.bitmap.clear\n    @textbox.bitmap.blt(0,0,@window_bmp,@window_bmp.rect)\n\n    @textbox.bitmap.blt(0,0,@text_bmp,@text_bmp.rect)\n\n    return if @word == nil\n\n    @scratch.font.bold = @word.include?(\"*\")\n    @scratch.font.italic = @word.include?(\"^\")\n\n    @textbox.bitmap.font.bold = @word.include?(\"*\")\n    @textbox.bitmap.font.italic = @word.include?(\"^\")\n\n    #txt = @word[0..@char_idx-1]\n    txt = @word.delete('*^')[0..@char_idx-1]\n    size = @scratch.text_size(txt)\n    @textbox.bitmap.font.color = Color.new(255,255,255,255)\n    @textbox.bitmap.draw_text(@cx,@cy,300,LINE_HEIGHT,txt)\n    # Half draw the final\n    return if @char_idx >= @word.length\n    @textbox.bitmap.font.color = Color.new(255,255,255,100)\n    @textbox.bitmap.draw_text(@cx+size.width,@cy-4,100,LINE_HEIGHT,@word.delete('*^').split('')[@char_idx])\n\n  end\n\n  #--------------------------------------------------------------------------\n  # * Pop down a line\n  #--------------------------------------------------------------------------\n  def next_line\n    @line_idx += 1\n    @word = nil\n    if @line_idx >= @lines.count\n      @state = :done\n    else\n      @word_idx = 0\n      @cy += LINE_HEIGHT\n      @cx = 0\n    end\n  end\n\n    #--------------------------------------------------------------------------\n  # * Next word\n  #--------------------------------------------------------------------------\n  def next_word\n\n    # blit last word onto the main bmp\n    if @word != nil\n\n      @text_bmp.font.bold = @word.include?('*')\n      @text_bmp.font.italic = @word.include?('^')\n\n      txt = @word.delete('*^')[0..@char_idx]\n\n\n      @text_bmp.draw_text(@cx,@cy,300,LINE_HEIGHT,txt)\n\n      # Step cursor\n      @cx += word_width(@word)\n\n    end\n\n    @word_idx += 1\n    @char_idx = 0\n    \n    if @word_idx >= @lines[@line_idx].count\n      next_line\n      return if @line_idx >= @lines.count\n    end\n\n    @word = @lines[@line_idx][@word_idx]\n\n    # CHECK FOR COMMANDS\n    if @word.include?('$')\n      cmd = @word.split(\".\")\n      wrd = cmd[0]\n\n      # check for command words\n      case wrd\n      \n        when \"$n\" # New line\n          next_line\n          \n        when \"$w\" # wait quarter second or custom\n          @wait_frames = cmd.size > 1 ? cmd[1].to_i : 15\n          @state = :waiting\n                    \n        when \"$sp\"\n          if cmd[1] == 'n' || cmd[1] == 'r'\n            @text_delay = @normal_speed\n          else\n            @text_delay = cmd[1].to_i\n          end\n                    \n        when \"$s\" # play sound\n          #log_err(\"TRYPLAYIT\")\n          #Audio.se_play(\"Audio/SE/\"+cmd[1]) \n          \n        when \"$m\"\n          \n          case cmd[1]\n            when 'stop'\n              Audio.bgm_stop            \n            when 'fade'\n              Audio.bgm_fade(750)                   \n            else\n              Audio.bgm_play(cmd[1])            \n          end\n          \n        when \"$nw\" # @^ (No wait for input)\n          @state = :closing\n          @show_next = false\n          \n        when \"$end\"\n          @state = :closing\n          @show_next = false\n          \n      end\n        \n      update_waiting while @state == :waiting\n      @word = nil\n      next_word\n\n    end\n\n  end  \n\n  #--------------------------------------------------------------------------\n  # * Update waiting\n  #--------------------------------------------------------------------------\n  def update_waiting\n    @wait_frames -= 1\n    @wait_frames = 0 if @skip_all #|| Graphics.frame_rate == 120\n    @state = :texting if (@wait_frames < 1)\n  end\n\n  #--------------------------------------------------------------------------\n  # * Wait for input after text is done\n  #--------------------------------------------------------------------------\n  def check_input_done\n    if Input.trigger?(Input::C)\n      #sound(:text_next)\n      #self.slide_zy(0.0)\n      @state = :closing\n      @textbox.bitmap.clear\n    end\n  end\n\n  #--------------------------------------------------------------------------\n  # Calculate size\n  #--------------------------------------------------------------------------\n  def word_width(word)\n      return TAB_WIDTH if word == \"$t\"\n      return 0 if word.include?(\"$\")\n      @scratch.font.bold = word.include?('*')\n      @scratch.font.italic = word.include?('^')\n      return @scratch.text_size(word.delete('*^')).width + SPACING\n  end\n\n  def max_width\n    max = 0\n    @lines.each{ |line|\n      width = line.inject(0) { |t,w| t + word_width(w) }\n      max = width if width > max\n    }\n    return max\n  end\n\n  def split_text(text)\n\n    # Split all text into lines\n    # Then calc widths and that\n\n    total_width = text.split(\" \").inject(0) { |t, w| t + word_width(w) }\n\n    # use total width to split into lines\n\n    # If there is a forced newline, there will be no autosizing\n    if text.include?(\"$n\")\n      return text.split(\"$n\").map { |i| i = i.split(\" \") }  \n    end\n\n    # If less than split width, just one line\n    if total_width < MIN_WIDTH\n      return [text.split(\" \")]\n    end\n\n    # If width is less than max * 2, we are splitting at the first word after half point\n    if total_width < MAX_WIDTH * 2\n      limit = total_width / 2\n      cursor = 0\n      lines = [[]]\n      text.split(\" \").each{ |word|\n        lines[-1].push(word)\n        cursor += word_width(word)\n        if cursor >= limit\n          lines.push([])\n          cursor = 0\n        end\n      }\n      return lines\n    end\n\n    # Else we are autosizing max width\n    lines = [[]]\n    limit = MAX_WIDTH\n    cursor = 0\n    text.split(\" \").each{ |word|\n      cursor += word_width(word)\n      if cursor > limit\n        cursor = 0\n        lines.push([])\n      end\n      lines[-1].push(word)\n    }\n    return lines\n\n  end\n\n  #--------------------------------------------------------------------------\n  # Misc\n  #--------------------------------------------------------------------------\n  def clear() end\n  def busy?() return @state != :idle end\n\nend",
			"file": "View/Ui/message.rb",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 10397,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Interpreter/interp_6.rb",
			"settings":
			{
				"buffer_size": 1203,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Interpreter/interp_5.rb",
			"settings":
			{
				"buffer_size": 14148,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\nclass ItemData\n	attr_reader :id\n	attr_reader :name\n	attr_reader :description\n	attr_reader :category\n	attr_reader :icon\n	attr_reader :price\n	attr_reader :action\nend\n\nclass WeaponData\n	attr_reader :id\n	attr_reader :name\n	attr_reader :description\n	attr_reader :category\n	attr_reader :icon\n	attr_reader :price\n	attr_reader :action\nend\n\nclass ArmorData\n	attr_reader :id\n	attr_reader :name\n	attr_reader :description\n	attr_reader :category\n	attr_reader :icon\n	attr_reader :price\n	attr_reader :action\nend\n\nclass SkillData\n\nend\n\nclass StateData\n\nend\n\nclass ActorData\n	attr_reader :id\n	attr_reader :name\n	attr_reader :profile\n	attr_reader :weapons\n	attr_reader :armor\n	attr_reader :statratings\nend\n\nclass EnemyData\n\nend\n\nclass ZoneData\n	attr_reader :bgm\n	attr_reader :bgs\nend\n\nclass ProgressData\n	attr_reader :category\n	attr_reader :id\n	attr_reader :value\nend\n\nclass QuestData\n	attr_reader :id\nend\n",
			"file": "Misc/data_types.rb",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 889,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Wizardry.sublime-build",
	"command_palette":
	{
		"height": 135.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"eval",
				"RubyEval: ruby_eval"
			],
			[
				"be",
				"BeautifyRuby"
			],
			[
				"b",
				"BeautifyRuby"
			],
			[
				"",
				"BeautifyRuby"
			],
			[
				"update",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"mode",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: List Packages"
			],
			[
				"p",
				"Package Control: Install Package"
			]
		],
		"width": 514.0
	},
	"console":
	{
		"height": 172.0,
		"history":
		[
			"which ruby",
			"import urllib.request,os; pr='Preferences.sublime-settings'; ip='ignored_packages'; n='Package Control'; s=sublime.load_settings(pr); ig=s.get(ip); ig.append(n); s.set(ip,ig); sublime.save_settings('Preferences.sublime-settings'); pf=n+'.sublime-package'; urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler())); by=urllib.request.urlopen('https://packagecontrol.io/'+pf.replace(' ','%20')).read(); open(os.path.join(sublime.installed_packages_path(),pf),'wb').write(by); ig.remove(n); s.set(ip,ig); sublime.save_settings(pr); print('Package Control: 3.0.0 upgrade successful!')",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Aveyond4/Scripts",
		"/C/Aveyond4/Scripts/Funcs",
		"/C/Aveyond4/Scripts/Model",
		"/C/Aveyond4/Scripts/Model/State",
		"/C/Aveyond4/Scripts/Scenes",
		"/C/Aveyond4/Scripts/Ui",
		"/C/Aveyond4/Scripts/View",
		"/C/Aveyond4/Editor"
	],
	"file_history":
	[
		"/C/Aveyond4/Scripts/View/character.rb",
		"/C/Aveyond4/Scripts/Model/character_1.rb",
		"/C/Aveyond4/Scripts/Model/Battle/actor.rb",
		"/C/Aveyond4/Scripts/Interpreter/interp_5.rb",
		"/C/Aveyond4/Scripts/Misc/movetomouse.rb",
		"/C/Aveyond4/Scripts/Model/character_3.rb",
		"/C/Aveyond4/Scripts/Model/player.rb",
		"/C/Aveyond4/Scripts/Utils/Debug/fps.rb",
		"/C/Aveyond4/Scripts/main.rb",
		"/C/Aveyond4/Scripts/Managers/nanos.rb",
		"/C/Aveyond4/Scripts/Scenes/map.rb",
		"/C/Aveyond4/Scripts/Managers/game.rb",
		"/C/Aveyond4/Scripts/Utils/Debug/spellcheck.rb",
		"/C/Aveyond4/Scripts/Utils/res.rb",
		"/C/Aveyond4/Scripts/Managers/cache.rb",
		"/C/Aveyond4/Scripts/Interpreter/interp_7.rb",
		"/C/Aveyond4/Scripts/View/world.rb",
		"/C/Aveyond4/Scripts/Managers/data.rb",
		"/C/Aveyond4/Scripts/Utils/rep.rb",
		"/C/Aveyond4/Scripts/Utils/tilemap.rb",
		"/C/Aveyond4/Scripts/Utils/xpfixes.rb",
		"/C/Aveyond4/Scripts/Utils/Debug/console.rb",
		"/C/Aveyond4/Scripts/Interpreter/interp_1.rb",
		"/C/Aveyond4/Scripts/Model/map.rb",
		"/C/Aveyond4/Scripts/Utils/Debug/menu.rb",
		"/C/Aveyond4/Scripts/Managers/debug.rb",
		"/C/Aveyond4/Scripts/Managers/audio.rb",
		"/C/Aveyond4/Scripts/View/Ui/message.rb",
		"/C/Aveyond4/Scripts/View/rope.rb",
		"/C/Aveyond4/Scripts/Scenes/base.rb",
		"/C/Aveyond4/Scripts/View/Ui/screen.rb",
		"/C/Aveyond4/Scripts/Model/Battle/enemy.rb",
		"/C/Aveyond4/Scripts/Model/event.rb",
		"/C/Aveyond4/Scripts/Managers/settings.rb",
		"/C/Aveyond4/Scripts/Managers/keyboard.rb",
		"/C/Aveyond4/Scripts/Utils/tilemap2.rb",
		"/C/Aveyond4/Scripts/Utils/fps.rb",
		"/C/Aveyond4/Scripts/Ui/textbox.rb",
		"/C/Aveyond4/Scripts/State/temp.rb",
		"/C/Aveyond4/Scripts/View/Ui/transitions.rb",
		"/C/Aveyond4/Scripts/View/Ui/base.rb",
		"/C/Aveyond4/Scripts/View/Ui/menu.rb",
		"/C/Aveyond4/Scripts/Utils/ruby.rb",
		"/C/Aveyond4/Scripts/View/battler.rb",
		"/C/Aveyond4/Scripts/State/state.rb",
		"/C/Aveyond4/Scripts/Utils/test.rb",
		"/C/Aveyond4/Scripts/Utils/vid.rb",
		"/C/Aveyond4/Scripts/Utils/fs.rb",
		"/C/FairyTale/Scripts/Engine/System/fullscreen.rb",
		"/C/Aveyond4/Scripts/State/party.rb",
		"/C/Aveyond4/Scripts/Interpreter/interp_3.rb",
		"/C/Aveyond4/Scripts/View/hud.rb",
		"/C/Aveyond4/Scripts/Utils/fontfix.rb",
		"/C/FairyTale/Scripts/Engine/ABC/fontfix.rb",
		"/C/Aveyond4/Editor/assets/css/hover.css",
		"/C/Aveyond4/Editor/assets/fonts/glyphicons-halflings-regular.woff",
		"/C/Users/Dan/AppData/Roaming/Sublime Text 3/Packages/Wizardry.sublime-build",
		"/C/Aveyond4/Scripts/Funcs/conditions.rb",
		"/C/Users/Dan/AppData/Roaming/Sublime Text 3/Packages/User/AutoUpdateSourceHeader.sublime-settings",
		"/C/Aveyond4/Editor/assets/css/custom-theme/jquery-ui-1.10.3.custom.css",
		"/C/Aveyond4/Scripts/Utils/spellcheck.rb",
		"/C/Aveyond4/Editor/icons.json",
		"/C/Aveyond4/Scripts/Managers/input.rb",
		"/C/Aveyond4/Scripts/Utils/Debug/mnu.rb",
		"/C/Aveyond4/Scripts/Utils/debug.rb",
		"/C/FairyTale/Scripts/Engine/System/rez.rb",
		"/C/Aveyond4/README.md",
		"/C/Aveyond4/Tilemap.txt",
		"/C/Aveyond4/Viewport.txt",
		"/C/Aveyond4/Bitmap.txt",
		"/C/Aveyond4/Scripts/Ui/base.rb",
		"/C/Aveyond4/Scripts/Managers/mouse.rb",
		"/C/Aveyond4/Scripts/Model/character_2.rb",
		"/C/Aveyond4/Scripts/View/Ui/chatting.rb",
		"/C/Aveyond4/Scripts/Interpreter/interp_4.rb",
		"/C/Aveyond4/Scripts/Model/Battle/action.rb",
		"/C/Aveyond4/Scripts/Model/Battle/battler_1.rb",
		"/C/Aveyond4/Scripts/Model/Battle/battler_3.rb",
		"/C/Aveyond4/Scripts/Model/Battle/battler_2.rb",
		"/C/Users/Dan/AppData/Roaming/Skype/My Skype Received Files/battle-actor.txt",
		"/C/Users/Dan/AppData/Roaming/Skype/My Skype Received Files/devulf mouse.txt",
		"/C/Users/Dan/AppData/Roaming/Skype/My Skype Received Files/mouse control.txt",
		"/C/Aveyond4/Scripts/Misc/commonevnet.rb",
		"/C/Aveyond4/Scripts/View/fpstest.rb",
		"/C/FairyTale/Scripts/Engine/Core/game_interpreter.rb",
		"/C/Stargazer/Data/Scripts/Misc/system_funcs.rb",
		"/C/FairyTale/Scripts/Engine/System/cache.rb",
		"/C/FairyTale/Scripts/Engine/Menus/Widgets/textbox.rb",
		"/C/FairyTale/Scripts/Engine/Menus/Widgets/base.rb",
		"/C/FairyTale/Scripts/Game/Ui/trans.rb",
		"/C/FairyTale/Scripts/Engine/Core/game_ui.rb",
		"/C/FairyTale/Scripts/Game/Ui/screen.rb",
		"/C/FairyTale/Scripts/Game/Ui/chatting.rb",
		"/C/FairyTale/Scripts/Game/Ui/menu.rb",
		"/C/Aveyond4/Scripts/Misc/hud.rb",
		"/C/FairyTale/Scripts/Game/hud.rb",
		"/C/Aveyond4/Editor/edit.html",
		"/C/Aveyond4/Scripts/Model/character_4.rb",
		"/C/Aveyond4/Scripts/Interpreter/interp_6.rb",
		"/C/Aveyond4/Scripts/Interpreter/interp_2.rb",
		"/C/Aveyond4/Scripts/Funcs/progress.rb",
		"/C/Aveyond4/Scripts/Misc/data_types.rb",
		"/C/Aveyond4/Editor/edit.js",
		"/C/Stargazer/Data/Scripts/Misc/conditions.rb",
		"/C/Aveyond4/Scripts/State/Scenes.rb",
		"/C/Aveyond4/Scripts/Data/data_types.rb",
		"/C/Aveyond4/Scripts/Data/actors.rb",
		"/C/Aveyond4/Scripts/Data/zones.rb",
		"/C/Aveyond4/Editor/json/actors.json",
		"/C/Aveyond4/Editor/json/actors(1).json",
		"/C/Aveyond4/Editor/meta/states.json",
		"/C/Aveyond4/Editor/meta/zones.json",
		"/C/Aveyond4/Editor/json/zones(1).json",
		"/C/Aveyond4/Editor/json/states.json",
		"/C/Aveyond4/Editor/json/zones.json",
		"/C/Stargazer/Data/Scripts/Data/loot.rb",
		"/C/Stargazer/Data/Scripts/Data/progress.rb",
		"/C/Stargazer/Data/Scripts/Data/party.rb",
		"/C/Stargazer/Data/Scripts/Data/zones.rb",
		"/C/Aveyond4/Editor/meta/actors.json",
		"/C/Aveyond4/Editor/meta/armors.json",
		"/C/Aveyond4/Editor/meta/enemies.json",
		"/C/Aveyond4/Editor/meta/items.json",
		"/C/Aveyond4/Editor/meta/weapons.json",
		"/C/Aveyond4/Editor/meta/skills.json",
		"/C/Aveyond4/Editor/json/skills.json",
		"/C/Aveyond4/Editor/json/weapons.json",
		"/C/Aveyond4/Editor/meta/quests.json"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"C:\\Aveyond4\\Scripts",
			"C:\\FairyTale\\Scripts"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"$temp.",
			"$map",
			"straighten",
			"$scene",
			"log_sys",
			"tileset.name",
			"move_left",
			"turn_enabled",
			"def turn_enab",
			"turn_enabled",
			"check_event_trigger_touch",
			"$world",
			"Cache.",
			"scroll",
			"nano",
			"-big",
			"move_speed",
			"tileset",
			"target",
			"screen_x",
			"real_x",
			"display_x",
			"center",
			"display_x",
			"didit",
			" p ",
			"ACE_MODE",
			"p ACE_",
			"p fals",
			"outline",
			"font.outline",
			"Graphics.width",
			".ini",
			"priorities",
			"$game_map",
			"@wordle",
			".running?",
			"message",
			"redraw",
			"TRYINGHERE",
			"next_line",
			"next_word",
			"$hud.update",
			"end",
			"over_trigger",
			"trying",
			"base_dex",
			"base_atk",
			"steps",
			"has_actors",
			"inputable",
			"def straighten",
			"turn_down",
			"CommonEvent",
			"Common_Event",
			"check_event_trigger_touch",
			"wait",
			"def wait",
			"wait",
			"over_trigger",
			"check_event_trigger_here",
			"check_event_trigger_touch",
			"over_trigger",
			"client",
			"GSM",
			"showcurs",
			"opacity",
			"update",
			"auto",
			"map_id",
			"@interp",
			"check_even",
			"direction",
			"pages",
			"$game_map",
			"$game_player",
			"$game_map",
			"setup_starting",
			"setup_starting_event",
			".starting",
			"starting",
			"check_event_tr",
			"_there",
			"check_trigger_there",
			"$game_player",
			"scroll",
			"def update",
			"move_down",
			"check_map_slip",
			"$game_player",
			" :",
			"$game_player",
			"$game_map",
			"id",
			"json_filter",
			"refres",
			"items",
			"$game_map",
			"$game_party",
			"$game_map",
			"$game_player",
			"CommonEvent",
			"$game_map",
			"data",
			"new_tileset",
			"$game_map",
			"$debug = ",
			".log",
			"any_save_files",
			"any_save",
			"Keys",
			"keys",
			"debuger",
			"icon",
			"Actor4",
			"graphic",
			"actors",
			"log_append 'update'",
			"log_append('update')",
			")\n",
			"from_skin",
			"next_word",
			"line_spacing",
			"next_line",
			"dodotpause",
			"@letters",
			"$game_map",
			"setup"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"tween",
			"$map",
			"$player",
			"$map",
			"$player",
			"$map",
			"$party",
			"$map",
			"$player",
			"$map",
			"$game_player",
			"$game_map",
			"get_ev",
			"@inventory",
			"@items"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Aveyond4/Editor/meta/actors.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 241,
						"regions":
						{
						},
						"selection":
						[
							[
								175,
								175
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": true,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Model/event.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8216,
						"regions":
						{
						},
						"selection":
						[
							[
								6580,
								6580
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5172.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Managers/game.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1801,
						"regions":
						{
						},
						"selection":
						[
							[
								1281,
								1281
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1259.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Scenes/map.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1959,
						"regions":
						{
						},
						"selection":
						[
							[
								502,
								502
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 528.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Scenes/battle.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2431,
						"regions":
						{
						},
						"selection":
						[
							[
								519,
								519
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "main.rb",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2047,
						"regions":
						{
						},
						"selection":
						[
							[
								340,
								340
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Model/Battle/battle.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 655,
						"regions":
						{
						},
						"selection":
						[
							[
								500,
								500
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 198.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Model/State/temp.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1233,
						"regions":
						{
						},
						"selection":
						[
							[
								1055,
								1031
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2280,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										167,
										173
									],
									[
										268,
										274
									],
									[
										362,
										368
									],
									[
										564,
										570
									],
									[
										710,
										716
									],
									[
										751,
										757
									],
									[
										811,
										817
									],
									[
										978,
										984
									],
									[
										1090,
										1096
									],
									[
										1224,
										1230
									],
									[
										1405,
										1411
									],
									[
										1425,
										1431
									],
									[
										1476,
										1482
									],
									[
										1586,
										1592
									],
									[
										1627,
										1633
									],
									[
										1802,
										1808
									],
									[
										1936,
										1942
									],
									[
										2117,
										2123
									],
									[
										2137,
										2143
									],
									[
										2188,
										2194
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "Model/map.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12520,
						"regions":
						{
						},
						"selection":
						[
							[
								174,
								174
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "Scenes/menu.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "View/character.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2654,
						"regions":
						{
						},
						"selection":
						[
							[
								1846,
								1846
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "View/hud.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1161,
						"regions":
						{
						},
						"selection":
						[
							[
								255,
								255
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "View/Ui/message.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10397,
						"regions":
						{
						},
						"selection":
						[
							[
								2879,
								2879
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2640.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "Interpreter/interp_6.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1203,
						"regions":
						{
						},
						"selection":
						[
							[
								1197,
								1197
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "Interpreter/interp_5.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14148,
						"regions":
						{
						},
						"selection":
						[
							[
								6837,
								6837
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3894.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "Misc/data_types.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 889,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 40.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 122.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "Aveyond4.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"scene",
				"Scripts\\Scenes\\map.rb"
			],
			[
				"tilemap",
				"Scripts\\Utils\\tilemap.rb"
			],
			[
				"tile",
				"Scripts\\Utils\\tilemap.rb"
			],
			[
				"game",
				"Scripts\\Managers\\game.rb"
			],
			[
				"text",
				"Scripts\\Ui\\textbox.rb"
			],
			[
				"debu",
				"Scripts\\Managers\\debug.rb"
			],
			[
				"key",
				"Scripts\\Managers\\keyboard.rb"
			],
			[
				"keyb",
				"Scripts\\Managers\\keyboard.rb"
			],
			[
				"cons",
				"Scripts\\Utils\\Debug\\console.rb"
			],
			[
				"conso",
				"Scripts\\Utils\\Debug\\console.rb"
			],
			[
				"deb",
				"Scripts\\Managers\\debug.rb"
			],
			[
				"de",
				"Scripts\\Managers\\debug.rb"
			],
			[
				"debug",
				"Scripts\\Managers\\debug.rb"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 375.0,
		"selected_items":
		[
		],
		"width": 378.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 256.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
